// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  password     String
  fullName     String
  phone        String?
  admin        Boolean        @default(false)
  avatar       String?
  role         UserRole
  visits       Visit[]
  Prescription Prescription[]
  Patient      Patient[]
  therapy      Therapy[]
  clinic       Clinic         @relation(fields: [clinicId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  clinicId     Int
}

enum UserRole {
  ADMIN
  DOCTOR
  PSYCHOLOGIST
  PHARMACIST
  NURSE
}

model Clinic {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  user      User[]
  Visit     Visit[]
  Therapy   Therapy[]
  field     field[]
  structure structure[]
}

enum Gender {
  Male
  Female
}

model Patient {
  id            Int            @id @default(autoincrement())
  doctorId      Int
  doctor        User           @relation(fields: [doctorId], references: [id])
  name          String
  dob           DateTime
  gender        Gender
  avatar        String?        @db.VarChar(1000)
  phone         String?
  father_dob    DateTime?
  mother_dob    DateTime?
  father_edu    String?
  father_work   String?
  mother_work   String?
  mother_edu    String?
  related       Boolean?
  siblings      Int?
  development   Json?
  order         Int?
  notes         String?
  family_hx     Json?
  past_hx       Json?
  occupation_hx Json?
  forensic_hx   Json?
  social_hx     Json?
  personal_hx   Json?
  visits        Visit[]
  prescriptions Prescription[]
  demographics  Demographics[]
  tests         Test[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Demographics {
  id             Int      @id @default(autoincrement())
  patient        Patient? @relation(fields: [patientId], references: [id])
  patientId      Int?
  marital_status String?
  occupation     String?
  children       String?
  residence      String?
  neighborhood   String?
  education      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Visit {
  id              Int           @id @default(autoincrement())
  patient         Patient       @relation(fields: [patientId], references: [id])
  patientId       Int
  doctor          User          @relation(fields: [doctorId], references: [id])
  doctorId        Int
  clinicId        Int
  clinic          Clinic        @relation(fields: [clinicId], references: [id])
  active          Boolean
  duration        Int?
  follow_up       Boolean       @default(false)
  chief_complaint Json?
  present_illness Json?
  examination     Json?
  ddx             Json?
  management      Json?
  ix              Json?
  consultations   Json?
  prescription    Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId  Int?
  tests           Test[]
  therapyRequest  Boolean?
  therapyId       Int?
  therapy         Therapy?      @relation(fields: [therapyId], references: [id])
  notes           Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Therapy {
  id             Int      @id @default(autoincrement())
  notes          String
  clinic         Clinic   @relation(fields: [clinicId], references: [id])
  psychologist   User?    @relation(fields: [psychologistId], references: [id])
  psychologistId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Visit          Visit[]
  clinicId       Int
}

model Prescription {
  id           Int          @id @default(autoincrement())
  patient      Patient?     @relation(fields: [patientId], references: [id])
  patientId    Int?
  doctor       User         @relation(fields: [doctorId], references: [id])
  doctorId     Int
  medications  Medication[]
  dosage       String
  instructions String
  visits       Visit[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Medication {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  available      Boolean
  Prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  range     String
  value     String
  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
  visit     Visit?   @relation(fields: [visitId], references: [id])
  visitId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model structure {
  id       Int     @id @default(autoincrement())
  heading  String
  order    Int
  fields   field[]
  clinicId Int
  clinic   Clinic  @relation(fields: [clinicId], references: [id])
}

model field {
  id          Int           @id @default(autoincrement())
  name        String
  order       Int
  type        String
  suggestions Suggestions[]
  structure   structure?     @relation(fields: [structureId], references: [id])
  structureId Int?
  Clinic      Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId    Int?
}

model Suggestions {
  id      Int    @id @default(autoincrement())
  text    String
  color   String
  order   Int
  field   field? @relation(fields: [fieldId], references: [id])
  fieldId Int?
}
